plugins {
    id 'fabric-loom' version '1.3.9'
}

def targetJavaVersion = 17
def plugin_version = project.plugin_version

repositories {
     maven {
       name = "sonatype-oss-snapshots1"
       url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
       mavenContent { snapshotsOnly() }
   }
   // for releases
   mavenCentral()
}

dependencies {
    shadow project(path: ':core', configuration: 'shadow')

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "net.kyori:adventure-platform-fabric:${project.adventure_fabric_version}"
    implementation "net.kyori:adventure-platform-fabric:${project.adventure_fabric_version}"
    implementation "cloud.commandframework:cloud-fabric:${project.cloudpaper_version}"
}

shadowJar {
    archiveBaseName.set('fabric')
    archiveClassifier.set('')
    archiveVersion.set('')

    dependencies {
        include(dependency("net.kyori:adventure-platform-fabric:.*"))
        include(dependency("cloud.commandframework:cloud-fabric:.*"))
    }

    mergeServiceFiles()
    minimize()
}

//jar.finalizedBy('shadowJar')

processResources {
    inputs.property "version", plugin_version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": plugin_version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}